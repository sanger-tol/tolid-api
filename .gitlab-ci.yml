stages:
  - lint
  - build
  - test
  - push
  - deploy

variables:
  DOCKER_IMAGE: $CI_REGISTRY/tol/sts/build-base:1.0.0
  DIND_IMAGE: $CI_REGISTRY/tol/sts/dind:1.0.0

lint:
  tags:
    - autoscale
  image: python:3.7
  stage: lint
  script:
    - pip install flake8
    - flake8 tolid-api/swagger_server/

.build-template: &build-template
  tags:
    - autoscale
  image: $DOCKER_IMAGE
  variables:
    DOCKER_TLS_CERTDIR: ''
  stage: build
  services:
    - name: $DIND_IMAGE
      alias: docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/$NAME:$CI_COMMIT_REF_SLUG || true
    - docker build --pull --cache-from $CI_REGISTRY_IMAGE/$NAME:$CI_COMMIT_REF_SLUG -t $CI_REGISTRY_IMAGE/$NAME:$CI_COMMIT_SHA -f $DOCKERFILE $PART
    - docker push $CI_REGISTRY_IMAGE/$NAME:$CI_COMMIT_SHA

build-api:
  <<: *build-template
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    PART: "tolid-api"
    DOCKERFILE: "tolid-api/Dockerfile"
    NAME: "tolid-api"

build-ui:
  <<: *build-template
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    PART: "tolid-ui"
    DOCKERFILE: 'tolid-ui/Dockerfile'
    NAME: "tolid-ui"

build-ui-test:
  <<: *build-template
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    PART: "tolid-ui"
    DOCKERFILE: 'tolid-ui/Dockerfile.dev'
    NAME: "tolid-ui-test"

test-api:
  tags:
    - autoscale
  image: $DOCKER_IMAGE
  stage: test
  services:
    - name: $DIND_IMAGE
      alias: docker
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker swarm init
    - docker stack deploy --with-registry-auth -c docker-compose.gitlab.yml -c docker-compose.gitlab-test.yml tolid
    - sleep 60
    - docker service logs tolid_tolid-api
    - docker exec $(docker ps -q -f name="tolid_tolid-api") bash -c "pip3 install tox; tox"

test-ui:
  tags:
    - autoscale
  image: $DOCKER_IMAGE
  stage: test
  services:
    - name: $DIND_IMAGE
      alias: docker
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker run -e CI=true $CI_REGISTRY_IMAGE/tolid-ui-test:$CI_COMMIT_SHA yarn test
  allow_failure: true

.push-template: &push-template
  tags:
    - autoscale
  image: $DOCKER_IMAGE
  stage: push
  services:
    - name: $DIND_IMAGE
      alias: docker
  variables:
    GIT_STRATEGY: none
    DOCKER_TLS_CERTDIR: ''
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/$NAME:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/$NAME:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/$NAME:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE/$NAME:$CI_COMMIT_REF_SLUG

push-api:
  <<: *push-template
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    NAME: tolid-api

push-ui:
  <<: *push-template
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    NAME: tolid-ui

push-ui-test:
  <<: *push-template
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ''
    NAME: tolid-ui-test

.deploy-template: &deploy-template
  tags:
    - autoscale
  image: $DOCKER_IMAGE
  variables:
    DOCKER_TLS_CERTDIR: ''
  stage: deploy
  script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker stack rm tolid
    - sleep 20
    - docker stack deploy --with-registry-auth -c docker-compose.gitlab.yml tolid

deploy-staging:
  <<: *deploy-template
  environment:
    name: staging
    url: http://172.27.21.233/
  variables:
    DOCKER_HOST: "ssh://ubuntu@172.27.21.233"
  only:
    - staging

deploy-production:
  <<: *deploy-template
  environment:
    name: production
    url: https://id.tol.sanger.ac.uk/
  variables:
    DOCKER_HOST: "ssh://ubuntu@172.27.18.201"
  only:
    - master
  when: manual